
use std::thread;
use std::io;
use std::sync::{Mutex, Arc};
use std::sync::mpsc::channel;

///this time, the goal of the program is to get an input with timeout using multithreading.

fn main() {
    
}


fn read() -> String {
    
    let mut prize = Mutex::new(0);
    let mut input= Mutex::new(String::new());

    let (tx, rx) = channel();
    let (tz, rz) = channel();

    //first thread


    let input_t = thread::scope(move || {
        let mut input = input.lock().unwrap();
        io::stdin().read_line(&mut *input)
        .ok()
        .expect("Failed to read line");
        let mut prize = prize.lock().unwrap();
        if prize.access() == 0 {
            *prize = 1;
        }
        tx.send(()).unwrap();
        tz.send(()).unwrap();
    });
    //second thread


    let prize = rx.recv().unwrap();
    if prize.access() == 1 {
        let input = rz.recv().unwrap();
    }

    **input
}
